// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ZCPLAYERPROFILESCHEMA_ZOMBIECATCHERS_PLAYERPROFILE_H_
#define FLATBUFFERS_GENERATED_ZCPLAYERPROFILESCHEMA_ZOMBIECATCHERS_PLAYERPROFILE_H_

#include "flatbuffers/flatbuffers.h"

namespace ZombieCatchers {
namespace PlayerProfile {

struct PlayerProfile;

struct Zombie;

struct Squeezer;

struct PlayerProfile FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_PLAYERLEVEL = 8,
    VT_PLAYERRANK = 10,
    VT_PLUTONIUM = 12,
    VT_COIN = 14,
    VT_MACHINE_PART_1 = 16,
    VT_MACHINE_PART_2 = 18,
    VT_MACHINE_PART_3 = 20,
    VT_ZOMBIES = 22,
    VT_SQUEEZERS = 24
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t playerLevel() const {
    return GetField<int32_t>(VT_PLAYERLEVEL, 0);
  }
  int32_t playerRank() const {
    return GetField<int32_t>(VT_PLAYERRANK, 0);
  }
  int32_t plutonium() const {
    return GetField<int32_t>(VT_PLUTONIUM, 0);
  }
  int32_t coin() const {
    return GetField<int32_t>(VT_COIN, 0);
  }
  int32_t machine_part_1() const {
    return GetField<int32_t>(VT_MACHINE_PART_1, 0);
  }
  int32_t machine_part_2() const {
    return GetField<int32_t>(VT_MACHINE_PART_2, 0);
  }
  int32_t machine_part_3() const {
    return GetField<int32_t>(VT_MACHINE_PART_3, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Zombie>> *zombies() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Zombie>> *>(VT_ZOMBIES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Squeezer>> *squeezers() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Squeezer>> *>(VT_SQUEEZERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_PLAYERLEVEL) &&
           VerifyField<int32_t>(verifier, VT_PLAYERRANK) &&
           VerifyField<int32_t>(verifier, VT_PLUTONIUM) &&
           VerifyField<int32_t>(verifier, VT_COIN) &&
           VerifyField<int32_t>(verifier, VT_MACHINE_PART_1) &&
           VerifyField<int32_t>(verifier, VT_MACHINE_PART_2) &&
           VerifyField<int32_t>(verifier, VT_MACHINE_PART_3) &&
           VerifyOffset(verifier, VT_ZOMBIES) &&
           verifier.VerifyVector(zombies()) &&
           verifier.VerifyVectorOfTables(zombies()) &&
           VerifyOffset(verifier, VT_SQUEEZERS) &&
           verifier.VerifyVector(squeezers()) &&
           verifier.VerifyVectorOfTables(squeezers()) &&
           verifier.EndTable();
  }
};

struct PlayerProfileBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(PlayerProfile::VT_ID, id);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(PlayerProfile::VT_NAME, name);
  }
  void add_playerLevel(int32_t playerLevel) {
    fbb_.AddElement<int32_t>(PlayerProfile::VT_PLAYERLEVEL, playerLevel, 0);
  }
  void add_playerRank(int32_t playerRank) {
    fbb_.AddElement<int32_t>(PlayerProfile::VT_PLAYERRANK, playerRank, 0);
  }
  void add_plutonium(int32_t plutonium) {
    fbb_.AddElement<int32_t>(PlayerProfile::VT_PLUTONIUM, plutonium, 0);
  }
  void add_coin(int32_t coin) {
    fbb_.AddElement<int32_t>(PlayerProfile::VT_COIN, coin, 0);
  }
  void add_machine_part_1(int32_t machine_part_1) {
    fbb_.AddElement<int32_t>(PlayerProfile::VT_MACHINE_PART_1, machine_part_1, 0);
  }
  void add_machine_part_2(int32_t machine_part_2) {
    fbb_.AddElement<int32_t>(PlayerProfile::VT_MACHINE_PART_2, machine_part_2, 0);
  }
  void add_machine_part_3(int32_t machine_part_3) {
    fbb_.AddElement<int32_t>(PlayerProfile::VT_MACHINE_PART_3, machine_part_3, 0);
  }
  void add_zombies(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Zombie>>> zombies) {
    fbb_.AddOffset(PlayerProfile::VT_ZOMBIES, zombies);
  }
  void add_squeezers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Squeezer>>> squeezers) {
    fbb_.AddOffset(PlayerProfile::VT_SQUEEZERS, squeezers);
  }
  explicit PlayerProfileBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlayerProfileBuilder &operator=(const PlayerProfileBuilder &);
  flatbuffers::Offset<PlayerProfile> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlayerProfile>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlayerProfile> CreatePlayerProfile(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t playerLevel = 0,
    int32_t playerRank = 0,
    int32_t plutonium = 0,
    int32_t coin = 0,
    int32_t machine_part_1 = 0,
    int32_t machine_part_2 = 0,
    int32_t machine_part_3 = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Zombie>>> zombies = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Squeezer>>> squeezers = 0) {
  PlayerProfileBuilder builder_(_fbb);
  builder_.add_squeezers(squeezers);
  builder_.add_zombies(zombies);
  builder_.add_machine_part_3(machine_part_3);
  builder_.add_machine_part_2(machine_part_2);
  builder_.add_machine_part_1(machine_part_1);
  builder_.add_coin(coin);
  builder_.add_plutonium(plutonium);
  builder_.add_playerRank(playerRank);
  builder_.add_playerLevel(playerLevel);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlayerProfile> CreatePlayerProfileDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *name = nullptr,
    int32_t playerLevel = 0,
    int32_t playerRank = 0,
    int32_t plutonium = 0,
    int32_t coin = 0,
    int32_t machine_part_1 = 0,
    int32_t machine_part_2 = 0,
    int32_t machine_part_3 = 0,
    const std::vector<flatbuffers::Offset<Zombie>> *zombies = nullptr,
    const std::vector<flatbuffers::Offset<Squeezer>> *squeezers = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto zombies__ = zombies ? _fbb.CreateVector<flatbuffers::Offset<Zombie>>(*zombies) : 0;
  auto squeezers__ = squeezers ? _fbb.CreateVector<flatbuffers::Offset<Squeezer>>(*squeezers) : 0;
  return ZombieCatchers::PlayerProfile::CreatePlayerProfile(
      _fbb,
      id__,
      name__,
      playerLevel,
      playerRank,
      plutonium,
      coin,
      machine_part_1,
      machine_part_2,
      machine_part_3,
      zombies__,
      squeezers__);
}

struct Zombie FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ZOMBIEID = 4,
    VT_AMOUNT = 6
  };
  int32_t zombieId() const {
    return GetField<int32_t>(VT_ZOMBIEID, 0);
  }
  int32_t amount() const {
    return GetField<int32_t>(VT_AMOUNT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ZOMBIEID) &&
           VerifyField<int32_t>(verifier, VT_AMOUNT) &&
           verifier.EndTable();
  }
};

struct ZombieBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_zombieId(int32_t zombieId) {
    fbb_.AddElement<int32_t>(Zombie::VT_ZOMBIEID, zombieId, 0);
  }
  void add_amount(int32_t amount) {
    fbb_.AddElement<int32_t>(Zombie::VT_AMOUNT, amount, 0);
  }
  explicit ZombieBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ZombieBuilder &operator=(const ZombieBuilder &);
  flatbuffers::Offset<Zombie> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Zombie>(end);
    return o;
  }
};

inline flatbuffers::Offset<Zombie> CreateZombie(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t zombieId = 0,
    int32_t amount = 0) {
  ZombieBuilder builder_(_fbb);
  builder_.add_amount(amount);
  builder_.add_zombieId(zombieId);
  return builder_.Finish();
}

struct Squeezer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_UNLOCKED = 6
  };
  int32_t type() const {
    return GetField<int32_t>(VT_TYPE, 0);
  }
  bool unlocked() const {
    return GetField<uint8_t>(VT_UNLOCKED, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           VerifyField<uint8_t>(verifier, VT_UNLOCKED) &&
           verifier.EndTable();
  }
};

struct SqueezerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(int32_t type) {
    fbb_.AddElement<int32_t>(Squeezer::VT_TYPE, type, 0);
  }
  void add_unlocked(bool unlocked) {
    fbb_.AddElement<uint8_t>(Squeezer::VT_UNLOCKED, static_cast<uint8_t>(unlocked), 0);
  }
  explicit SqueezerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SqueezerBuilder &operator=(const SqueezerBuilder &);
  flatbuffers::Offset<Squeezer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Squeezer>(end);
    return o;
  }
};

inline flatbuffers::Offset<Squeezer> CreateSqueezer(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t type = 0,
    bool unlocked = false) {
  SqueezerBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_unlocked(unlocked);
  return builder_.Finish();
}

inline const ZombieCatchers::PlayerProfile::PlayerProfile *GetPlayerProfile(const void *buf) {
  return flatbuffers::GetRoot<ZombieCatchers::PlayerProfile::PlayerProfile>(buf);
}

inline const ZombieCatchers::PlayerProfile::PlayerProfile *GetSizePrefixedPlayerProfile(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ZombieCatchers::PlayerProfile::PlayerProfile>(buf);
}

inline bool VerifyPlayerProfileBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ZombieCatchers::PlayerProfile::PlayerProfile>(nullptr);
}

inline bool VerifySizePrefixedPlayerProfileBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ZombieCatchers::PlayerProfile::PlayerProfile>(nullptr);
}

inline void FinishPlayerProfileBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ZombieCatchers::PlayerProfile::PlayerProfile> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlayerProfileBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ZombieCatchers::PlayerProfile::PlayerProfile> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace PlayerProfile
}  // namespace ZombieCatchers

#endif  // FLATBUFFERS_GENERATED_ZCPLAYERPROFILESCHEMA_ZOMBIECATCHERS_PLAYERPROFILE_H_
